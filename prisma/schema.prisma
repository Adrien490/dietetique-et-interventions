generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id
  name            String
  role            UserRole         @default(CLIENT)
  email           String
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  sessions        Session[]
  accounts        Account[]
  contactRequests ContactRequest[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum UserRole {
  ADMIN // Manon uniquement
  CLIENT // Patients
}

model ContactRequest {
  id          String              @id @default(cuid())
  fullName    String
  email       String
  subject     String
  message     String
  status      ContactStatus       @default(PENDING)
  attachments ContactAttachment[]

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactAttachment {
  id        String   @id
  filename  String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contactRequestId String
  contactRequest   ContactRequest @relation(fields: [contactRequestId], references: [id], onDelete: Cascade)
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}
